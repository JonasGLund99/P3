@using src.Data
@using src.Shared

<tr>
    <td class="line-number">Slide</td>
    @{int j = 1;}
    @foreach (string chosenTableTitle in ClinicalTest.ChosenTableTitles)
    {
        if (chosenTableTitle != "" && chosenTableTitle != null)
        {
            <td id="key-number-@j">@chosenTableTitle</td>
            j++;
        }       
    }
    <td>Quality control</td>
    @foreach (string analyteName in ClinicalTest.AnalyteNames) 
    {
        <td contenteditable="false">@analyteName</td>
    }
</tr>
@foreach(Block block in blocks)
{
    <tr>
        <td class="line-number">@((block.SlideIndex + 1))</td>
        @{int k = 1;}
        @foreach (string chosenTableTitle in ClinicalTest.ChosenTableTitles)
        {
            if (chosenTableTitle != "" && chosenTableTitle != null)
            {
                <td class="key-number-@k">@block.PatientData[ClinicalTest.TableTitles.IndexOf(chosenTableTitle)]</td>
                k++;
            }
        }
        @if (block.QC == double.NaN)
        {
            <td class="invalid-block">-</td>
        }
        else if (block.QC < 0.97)
        {
            <td class="invalid-block">@Math.Round(block.QC, 9).ToString("0.000000000")</td>
        }
        else
        {
            <td class="qc">@Math.Round(block.QC, 9).ToString("0.000000000")</td>
        }
        @foreach (Nplicate nplicate in block.Nplicates)
        {
            if (nplicate.GetFlagCount() == ClinicalTest.NplicateSize)
            {
                <td @onclick="@((e) => OpenSpots(e, nplicate, block))" class="data @(nplicate==SelectedNplicate ? "selected-td" : "") all-flagged-nplicate"></td>
            }
            else if ((nplicate.RI == 0 || nplicate.RI == double.NaN) && nplicate.IsFlagged)
            {
                <td @onclick="@((e) => OpenSpots(e, nplicate, block))" contenteditable="false" class="data @(nplicate==SelectedNplicate ? "selected-td" : "") flagged-nplicate">-</td>
            }
            else if (nplicate.RI == 0 || nplicate.RI == double.NaN)
            {
                <td class="data @(nplicate==SelectedNplicate ? "selected-td" : "")" @onclick="@((e) => OpenSpots(e, nplicate, block))" contenteditable="false">-</td>

            }
            else if (nplicate.IsFlagged)
            {
                <td @onclick="@((e) => OpenSpots(e, nplicate, block))" contenteditable="false" class="data @(nplicate==SelectedNplicate ? "selected-td" : "") flagged-nplicate">@Math.Round(nplicate.RI, 2).ToString("0.00")</td>
            }
            else
            {
                <td class="data @(nplicate==SelectedNplicate ? "selected-td" : "")" @onclick="@((e) => OpenSpots(e, nplicate, block))" contenteditable="false">@Math.Round(nplicate.RI, 2).ToString("0.00")</td>
            }
        }
    </tr>
}


@code {
    private List<Block> blocks { get; set; } = new List<Block>();
    private bool loadingResultTable = true;

    [Parameter, EditorRequired]
    public EventCallback<bool> UpdateLoadingStatus { get; set; }

    [Parameter]
    public Nplicate? SelectedNplicate { get; set; } = null;

    [Parameter, EditorRequired]
    public ClinicalTest ClinicalTest { get; set; } = new();

    [Parameter, EditorRequired]
    public EventCallback<Tuple<MouseEventArgs, Nplicate, Block>> ShowSpots { get; set; }

    public async void OpenSpots(MouseEventArgs e, Nplicate selectedTd, Block selectedBlock)
    {
        await ShowSpots.InvokeAsync(new Tuple<MouseEventArgs, Nplicate, Block>(e, selectedTd, selectedBlock));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            blocks = await ClinicalTest.GetSortedBlocks();
            loadingResultTable = false;
            await UpdateLoadingStatus.InvokeAsync(loadingResultTable);
            StateHasChanged();
        }
    }
}
