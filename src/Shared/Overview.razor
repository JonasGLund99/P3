
@using src.Data

@inject IJSRuntime JS

@if (displayError) {
    <div class="modal fade show" style="display:block" aria-modal="true" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <!-- Modal Header -->
                <div class="modal-header">
                    <h4 class="modal-title">No sensitive data allowed</h4>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    <input type=checkbox @onchange="ToggleSensitiveDataCheck"> I have not inserted any sensitive personal data
                </div>

                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick=@ModalCancel>Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick=@(() => { displayError = false; noSensitiveData = false; saveBlocks();}) disabled=@(!noSensitiveData)>OK</button>
                </div>
            </div>
        </div>
    </div>
}

@if (displaySensitiveDataModal)
{
    <div class="modal fade show" style="display:block" aria-modal="true" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <!-- Modal Header -->
                <div class="modal-header">
                    <h4 class="modal-title">No sensitive data allowed</h4>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    <input type=checkbox @onchange="ToggleSensitiveDataCheck"> I have not inserted any sensitive personal data
                </div>

                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => displaySensitiveDataModal = false">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick=@(() => { displaySensitiveDataModal = false; ImportExcelFile();}) disabled=@(!noSensitiveData)>OK</button>
                </div>
            </div>
        </div>
    </div>
}

<div class="overview-component">
    @if (mode == "Overview") {
        <div class="toolbar-container">
            <i id="info-button" title="Select which information to show in the overview
Left click on a block to insert a blank block
Right click on a block to change it's colour" class="fa fa-info-circle"></i>
            <div id="toolbar">
                <i class="fa-solid fa-droplet-slash" title="Clear all colours" @onclick="() => clearColors(overview)"></i>
                <div id="edit-icon" data-title="Edit overview in table view" @onclick='() => { tableViewIcon = "icons/TableView_icon.svg"; switchMode("Table-view"); }'>
                    <img src="@tableViewIcon" @onmouseover='() => tableViewIcon = "icons/TableView_icon_hover.svg"' @onmouseout='() => tableViewIcon = "icons/TableView_icon.svg"'/>
                </div>
                <div id="key-selectors">
                    @for (int i = 0; i < ClinicalTest.ChosenTableTitles.Length; i++)
                    {
                        int tableTitleNumber = i;
                        <div class="key-selector">
                            <span class="selector-number">@(i + 1)</span>
                            <select @onchange="(e) => chooseTableTitle(e, tableTitleNumber)">
                                <option value="">-</option>
                                @foreach (string tableTitle in ClinicalTest.TableTitles)
                                {
                                    @if (ClinicalTest.ChosenTableTitles[i] == tableTitle) 
                                    {
                                        <option selected value="@tableTitle">@tableTitle</option>
                                    }
                                    else
                                    {
                                        <option value="@tableTitle">@tableTitle</option>
                                    }
                                }
                            </select>
                        </div>
                    }
                </div>
                @if (DatabaseStatus == 1)
                {
                    <div id="export-icon" data-title="@(DatabaseStatus != 1 ? "Can't import while saving" : "Import overview")">
                        <label>
                            <i style="font-size: 30px; margin-top: 2px;" class="fa-solid fa-file-import" />
                            <InputFile style="display: none;" accept=".xlsx" OnChange="@SaveExcelFile" />
                        </label>
                    </div>
                }
                else
                {
                    <div id="export-icon" data-title="@(DatabaseStatus != 1 ? "Can't import while saving" : "Import overview")">
                        <label>
                            <i style="font-size: 30px; margin-top: 2px;" class="@(DatabaseStatus != 1 ? "no-export" : "") fa-solid fa-file-import"></i>
                        </label>
                    </div>
                }

                <div id="export-icon" data-title="@(DatabaseStatus != 1 ? "Can't export while saving" : "Export overview")">
                    <i class="@(DatabaseStatus != 1 ? "no-export" : "") fa-solid fa-file-export" @onclick="Export"></i>
                </div>
            </div>
            <div id="save-blocks-animation" class='@(isSavingOverview ? "saving" : "")'>
                @* disable button if saving *@
                @* <i id="save-blocks-btn" class="fa-solid fa-circle-check" @onclick="() => saveOverview()"></i> *@
            </div>
        </div>
        
        @if (!ClinicalTest.IsEmpty && overview.Count > 0 && overviewLoaded)
        {
            <div class="plates">
                @for (int i = 0; i < overview.Count; i++)
                {
                    <Plate 
                        ClinicalTest="@ClinicalTest" 
                        PlateIndex=i 
                        Slides="overview[i]"
                        updateOverviewState="@updateOverviewState"
                    />
                }
            </div>
        }
        else if (!ClinicalTest.IsEmpty)
        {
            <div class="ghostPlate plate">
                <p id="loading-text">Loading overview . . .</p>
            </div>
        }
        else
        {
            <div class="plate">
                <div class="overview-needs-info">
                    <p>
                        @(ClinicalTest.Title) has no clinical data yet.
                        <br>
                        Add clinical data in the table-view or import an excel file to generate the overview.
                    </p>

                    <button class="green-button" @onclick='() => { tableViewIcon = "icons/TableView_icon.svg"; switchMode("Table-view"); }' @onmouseover='() => tableViewIconWhite = "icons/TableView_icon_white_hover.svg"' @onmouseout='() => tableViewIconWhite = "icons/TableView_icon_white.svg"'>
                        Open table-view
                        <img src="@tableViewIconWhite"/>
                    </button>
                    <h3 style="margin: 0; padding: 10px;">
                        Or
                    </h3>
                    @if (DatabaseStatus == 1)
                    {
                        <label class="green-button">
                            Import Clinical Data from Excel
                            <i style="font-size: 24px; margin-top: 2px;" class="fa-solid fa-file-import" />
                            <InputFile style="display: none;" accept=".xlsx" OnChange="@SaveExcelFile" />
                        </label>
                    }
                    else
                    {
                        <label class="green-button" style="cursor: not-allowed;">
                            Import Clinical Data from Excel
                            <i style="font-size: 24px; margin-top: 2px;" class="@(DatabaseStatus != 1 ? "no-export" : "") fa-solid fa-file-import"></i>
                        </label>
                    }
                </div>
            </div> 
        }
    }
    else 
    {
        <div class="toolbar-container">
            <i id="info-button" title="Editing overview - insert clinical data in the table" class="fa fa-info-circle"></i>
            <div id="toolbar">
                <div id="buttons">
                    <span id="clear-button" class="@(DatabaseStatus != 1 ? "no-clear" : "")" data-title="@(DatabaseStatus != 1 ? "Clearing table isn't allowed while saving" : "Clear entire table")" @onclick='() => { clearTableIcon = "icons/ClearTable_icon.svg"; clearTable(); }' @onmouseover='() => clearTableIcon = DatabaseStatus != 1 ? "icons/ClearTable_icon.svg" : "icons/ClearTable_icon_hover.svg"' @onmouseout='() => clearTableIcon = "icons/ClearTable_icon.svg"'>
                        Clear table
                        <img src="@clearTableIcon"/>
                    </span>
                    <span id="xmark-button" data-title="Continue without saving" @onclick='() => switchMode("Overview")'><i class="fa-solid fa-xmark"></i></span>
                    <span id="check-button" data-title="Continue and save changes" @onclick='(() => displayError = true)'><i class="fa-solid fa-check"></i></span>
                </div>
            </div>
        </div>
        <div class="table-view-container">
            <OverviewTable ClinicalTest="@ClinicalTest"/>
		</div>
    }

</div>

@code {
    [Parameter, EditorRequired]
    public Experiment Experiment { get; set; } = new();
    [Parameter, EditorRequired]
    public ClinicalTest ClinicalTest { get; set; } = new();
    [Parameter, EditorRequired]
    public double DatabaseStatus { get; set; } = 1;

    private bool noSensitiveData = false;
    private bool displaySensitiveDataModal = false;
    private bool displayError = false;
    private string tableViewIcon { get; set; } = "icons/TableView_icon.svg";
    private string tableViewIconWhite { get; set; } = "icons/TableView_icon_white.svg";
    private string clearTableIcon{ get; set; } = "icons/ClearTable_icon.svg";
    private const int SlideWidth = 3;
    private const int SlidesInPlate = 21;
    private const int BlocksInSlide = 21;
    private const int BlocksInPlate = 84;
    private List<List<Block[]>> overview = new List<List<Block[]>>();
    private bool overviewLoaded = false;
    private bool isSavingOverview = false;
    private IBrowserFile overviewFile;

    //Switch viewmode (Overview or Table-view)
    public string mode { get; set; } = "Overview";

    protected override void OnAfterRender(bool firstRender) 
    {
        if (firstRender)
        {
            updateOverviewState();
        }
    }

    public void ToggleSensitiveDataCheck(ChangeEventArgs e)
    {
        if (e.Value == null) return;
        noSensitiveData = (bool)e.Value;
    }

    public void switchMode(string newMode)
    {
        mode = newMode;
    }
    private async void updateOverviewState() {
        overview = await ClinicalTest.GenerateOverview();
        overviewLoaded = true;
        StateHasChanged();
    }

    //Update chosen table titles
    private void chooseTableTitle(ChangeEventArgs e, int tableTitleNumber)
    {
        string? selectedTableTitle = e.Value?.ToString();
        if (selectedTableTitle == null) return;

        ClinicalTest.ChosenTableTitles[tableTitleNumber] = selectedTableTitle;
        ClinicalTest.SaveToDatabase();
        StateHasChanged();
    }

    private async void saveBlocks() {
        if (ClinicalTest == null) throw new NullReferenceException("ClinicalTest object is null");

        string[][] tableData = await JS.InvokeAsync<string[][]>("getTableData");
        ClinicalTest.Slides.Clear();

        if (tableData.Length == 0)
        {
            ClinicalTest.IsEmpty = true;
        }
        else
        {
            ClinicalTest.IsEmpty = false;
        }

        List<Block> blockList = new List<Block>();

        // Create list of table titles
        List<string> tableTitles;
        if (tableData.Length > 0 && tableData[0].Length > 0) {
            tableTitles = tableData[0].ToList();
        } 
        else 
        {
            tableTitles = new List<string>();
        }
        ClinicalTest.TableTitles = tableTitles;

        for (int i = 0; i < ClinicalTest.ChosenTableTitles.Length; i++)
        {
            if (!tableTitles.Contains(ClinicalTest.ChosenTableTitles[i]))
            {
                ClinicalTest.ChosenTableTitles[i] = "";
            }
        }

        // Remove first line from table data
        tableData = tableData.Skip(1).ToArray();
        List<Block> normBlocks = await ClinicalTest.GetNormalBlocks();

        foreach (string[] block in tableData) 
        {
            int blockIndex = Array.IndexOf(tableData, block);
            Block newBlock = new Block(Guid.NewGuid().ToString(), block.ToList(), Block.BlockType.Normal, 0, 0, ClinicalTest.id);
            if (blockIndex < normBlocks.Count)
            {
                newBlock.TextColour = normBlocks[blockIndex].TextColour;
            }
            blockList.Add(newBlock);
        }
        ClinicalTest.SetNormalBlocks(blockList);

        overviewLoaded = false;
        switchMode("Overview");
        StateHasChanged();
        ClinicalTest.CalculationNecessary = true;
        ClinicalTest.SaveToDatabase(true);
        updateOverviewState();
    }

    private async void clearTable() {
        if (DatabaseStatus == 1)
        {
            await JS.InvokeVoidAsync("clearTable");
        }
    }

    private void clearColors(List<List<Block[]>> overview)
    {
        for(int ovNr = 0; ovNr < overview.Count; ovNr++)
        {
            for(int slNr = 0; slNr < overview[ovNr].Count; slNr++)
            {
                for (int blNr = 0; blNr < overview[ovNr][slNr].Length; blNr++)
                {
                    if (overview[ovNr][slNr][blNr].TextColour != "#212529" && overview[ovNr][slNr][blNr].TextColour != "")
                    {
                        overview[ovNr][slNr][blNr].TextColour = "#212529";
                    }
                }
            }
        }
        ClinicalTest.SaveToDatabase(true);
        StateHasChanged();
    } 

    public void SaveExcelFile(InputFileChangeEventArgs e)
    {
        if (DatabaseStatus == 1)
        {
            displaySensitiveDataModal = true;
            overviewFile = e.File;
        }
    }

    public async void ImportExcelFile()
    {
        await ClinicalTest.ImportOverview(overviewFile);
        ClinicalTest.IsEmpty = false;
        updateOverviewState();
    }

    public async void Export()
    {
        if (DatabaseStatus == 1)
        {
            FileInfo file = await ClinicalTest.ExportOverview();
            await JS.InvokeVoidAsync("triggerFileDownload", $"{ClinicalTest.Title}-prøve-opsætning.xlsx", $"http://localhost:5110/exports/{ClinicalTest.id}-prøve-opsætning.xlsx");
            await Task.Delay(1000).ContinueWith(t => file.Delete());
        }
    }
    
    public void ModalCancel()
    {
        displayError = false;
    }
}
