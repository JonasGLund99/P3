@using src.Data

@inject IJSRuntime JS

<div class="overview-component">
    @if (mode == "Overview") {
        <div id="toolbar">
            @* <div id="mode-icons">
                <img src="@(mode == "Overview" ? "icons/Overview_icon_active.svg" : "icons/Overview_icon.svg")" title="View overview" @onclick='() => switchMode("Overview")'/>
                <img src="@(mode == "Table-view" ? "icons/Table-view_icon_active.svg" : "icons/Table-view_icon.svg")" title="View table-view" @onclick='() => switchMode("Table-view")'/>
            </div> *@
            <div id="edit-icon">
                <i class="fa-solid fa-pen" @onclick='() => switchMode("Table-view")'></i>
            </div>
            <div id="key-selectors">
                @for (int i = 0; i < chosenDataTypes.Length; i++)
                {
                    int dataTypeNo = i;
                    <div class="key-selector">
                        <span class="selector-number">@(i + 1)</span>
                        <select @onchange="(e) => chooseDataType(e, dataTypeNo)">
                            <option value="Choose type">Choose type</option>
                            @foreach (KeyValuePair<string, bool> kvPair in ClinicalTest.PatientKeys.ToList())
                            {
                                <option value="@kvPair.Key">@kvPair.Key</option>
                            }
                        </select>
                    </div>
                }
            </div>
            <div id="export-icon">
                <i class="fa-solid fa-file-export"></i>
            </div>
        </div>
        <div class="plate">
            <div class="overview-needs-info">
                <p>
                    Add clinical data before viewing the overview
                </p>

                <button class="green-button" @onclick='() => switchMode("Table-view")'>
                    Add clinical data
                    @* <img src="icons/Table-view_icon_active.svg" class="btn-icon"/> *@
                    <i class="fa-solid fa-pen"></i>
                </button>
            </div>
        </div>	
    }
    else 
    {
        <div id="toolbar">
            <div id="buttons">
                <span id="clear-button" @onclick=clearTable>Clear</span>
                <span id="xmark-button" @onclick='() => switchMode("Overview")'><i class="fa-solid fa-xmark"></i></span>
                <span id="check-button" @onclick=savePatientData><i class="fa-solid fa-check"></i></span>
            </div>
        </div>
        <div class="table-view-container">
            <OverviewTable clinicalTest="@ClinicalTest"/>
		</div>
    }

</div>

@code {
	[Parameter]
	public ClinicalTest? ClinicalTest { get; set; }


	public string mode { get; set; } = "Overview";
    public string[] chosenDataTypes = new string[3];
	public List<string> allDataTypeNames = new List<string> {"Name", "SoT", "Died", "Age at SOT", "Baseline BP", "BDH"};

	public void switchMode(string newMode)
	{
		mode = newMode;
	}

	private string selectedDataType = "";
	void chooseDataType(ChangeEventArgs e, int typeNo)
	{
		string? value = e.Value?.ToString();
		if (value == null) return;

		selectedDataType = value;
		chosenDataTypes[typeNo] = selectedDataType;
	}
    private async void savePatientData() {
        if (ClinicalTest == null) throw new NullReferenceException("ClinicalTest object is null");

        // Remove existing slides
        ClinicalTest.Slides = new List<Slide>();

        // Get table data from DOM
        string[][] tableData = await JS.InvokeAsync<string[][]>("getTableData");
        
        // Create patient keys
        List<string> patientKeys;
        if (tableData.Length > 0 && tableData[0].Length > 0) {
            patientKeys = tableData[0].ToList();
        } else {
            patientKeys = new List<string>();
        }
        ClinicalTest.CreatePatientKeys(patientKeys);


        // Add slides to the clinical test
        List<List<string>> patientData = new List<List<string>>();
        for (int i = 1; i < tableData.Length; i++) {
            var list = new List<string>();
            for (int j = 0; j < tableData[i].Length; j++) {
                list.Add(tableData[i][j]);
            }
            patientData.Add(list);

            if (i % 20 == 0) {
                ClinicalTest.AddSlide(
                    slide: new Slide(""),
                    patientData: new List<List<string>>(patientData)
                );
                patientData.Clear();
            }
        }
        // Add last slide with remaining patient data
        ClinicalTest.AddSlide(
            slide: new Slide(""),
            patientData: new List<List<string>>(patientData)
        );




        // Save to database and switch back to the overview
        await ClinicalTest.SaveToDatabase();
        switchMode("Overview");
        StateHasChanged();
    }
    private async void clearTable() {
        await JS.InvokeVoidAsync("clearTable");
    }
}

