@using src.Data

@inject IJSRuntime JS

<div class="overview-component">
    @if (mode == "Overview") {
        <div id="toolbar">
            <div id="info-button" data-title="Select which information to show in the overview">
                <i class="fa fa-info-circle"></i>
            </div>
            <div id="edit-icon" data-title="Edit overview in table view">
                <i class="fa-solid fa-pen" @onclick='() => switchMode("Table-view")'></i>
            </div>
            <div id="key-selectors">
                @for (int i = 0; i < ClinicalTest.ChosenTableTitles.Length; i++)
                {
                    int tableTitleNumber = i;
                    <div class="key-selector">
                        <span class="selector-number">@(i + 1)</span>
                        <select @onchange="(e) => chooseTableTitle(e, tableTitleNumber)">
                            <option value="">-</option>
                            @foreach (string tableTitle in ClinicalTest.TableTitles)
                            {
                                @if (ClinicalTest.ChosenTableTitles[i] == tableTitle) 
                                {
                                    <option selected value="@tableTitle">@tableTitle</option>
                                }
                                else
                                {
                                    <option value="@tableTitle">@tableTitle</option>
                                }
                            }
                        </select>
                    </div>
                }
            </div>
            <div id="export-icon" data-title="Export overview">
                <i class="fa-solid fa-file-export"></i>
            </div>
        </div>
        
        @if (!ClinicalTest.IsEmpty && overview.Count > 0 && overviewLoaded)
        {
            <div class="plates">
                @for (int i = 0; i < overview.Count; i++)
                {
                    <Plate 
                        ClinicalTest="@ClinicalTest" 
                        PlateIndex=i 
                        Slides="overview[i]"
                        updateOverviewState="@updateOverviewState"
                    />
                }
            </div>
        }
        else if (!ClinicalTest.IsEmpty)
        {
            <div>Loading...</div>
        }
        else
        {
            <div class="plate">
                <div class="overview-needs-info">
                    <p>
                        @(ClinicalTest.Title) has no clinical data yet.
                        <br>
                        Add clinical data in the table-view to generate the overview.
                    </p>

                    <button class="green-button" @onclick='() => switchMode("Table-view")'>
                        Open table-view
                        @* <img src="icons/Table-view_icon_active.svg" class="btn-icon"/> *@
                        <i class="fa-solid fa-pen"></i>
                    </button>
                </div>
            </div>
        }
    }
    else 
    {
        <div id="toolbar">
            <div id="buttons">
                <span id="info-button" data-title="Editing overview - insert clinical data in the table">
                    <i class="fa fa-info-circle"></i>
                </span>
                <span id="clear-button" data-title="Clear entire table" @onclick=clearTable>Clear table</span>
                <span id="xmark-button" data-title="Continue without saving" @onclick='() => switchMode("Overview")'><i class="fa-solid fa-xmark"></i></span>
                <span id="check-button" data-title="Continue and save changes" @onclick=saveBlocks><i class="fa-solid fa-check"></i></span>
            </div>
        </div>
        <div class="table-view-container">
            <OverviewTable ClinicalTest="@ClinicalTest"/>
		</div>
    }

</div>

@code {
    [Parameter, EditorRequired]
    public ClinicalTest ClinicalTest { get; set; } = new();

    private const int SlideWidth = 3;
    private const int SlidesInPlate = 21;
    private const int BlocksInSlide = 21;
    private const int BlocksInPlate = 84;

    private List<List<Block[]>> overview = new List<List<Block[]>>();
    private bool overviewLoaded = false;

    //Switch viewmode (Overview or Table-view)
    public string mode { get; set; } = "Overview";

    protected override void OnAfterRender(bool firstRender) 
    {
        if (firstRender)
        {
            updateOverviewState();
        }
    }

    public void switchMode(string newMode)
    {
        mode = newMode;
    }
    private async void updateOverviewState() {
        await ClinicalTest.SaveToDatabase();
        overview = await ClinicalTest.GenerateOverview();
        overviewLoaded = true;
        StateHasChanged();
    }

    //Update chosen table titles
    async void chooseTableTitle(ChangeEventArgs e, int tableTitleNumber)
    {
        string? selectedTableTitle = e.Value?.ToString();
        if (selectedTableTitle == null) return;

        ClinicalTest.ChosenTableTitles[tableTitleNumber] = selectedTableTitle;
        await ClinicalTest.SaveToDatabase();
        StateHasChanged();
    }

    private async void saveBlocks() {
        if (ClinicalTest == null) throw new NullReferenceException("ClinicalTest object is null");
        
        string[][] tableData = await JS.InvokeAsync<string[][]>("getTableData");
        
        if (tableData.Length == 0)
        {
            ClinicalTest.IsEmpty = true;
        }
        else
        {
            ClinicalTest.IsEmpty = false;
        }

        List<Block> blockList = new List<Block>();

        // Create list of table titles
        List<string> tableTitles;
        if (tableData.Length > 0 && tableData[0].Length > 0) {
            tableTitles = tableData[0].ToList();
        } 
        else 
        {
            tableTitles = new List<string>();
        }
        ClinicalTest.TableTitles = tableTitles;

        // Remove first line from table data
        tableData = tableData.Skip(1).ToArray();

        foreach (string[] block in tableData) 
        {
            blockList.Add(new Block(Guid.NewGuid().ToString(), block.ToList(), Block.BlockType.Normal, 0, 0, ClinicalTest.id));
        }
        ClinicalTest.SetNormalBlocks(blockList);

        overviewLoaded = false;
        switchMode("Overview");
        StateHasChanged();
        await ClinicalTest.SaveToDatabase(true);
        updateOverviewState();
    }

    private async void clearTable() {
        await JS.InvokeVoidAsync("clearTable");
    }
}
