@using src.Data

@inject IJSRuntime JS

<div class="overview-component">
    @if (mode == "Overview") {
        <div id="toolbar">
            @*
            <div id="mode-icons">
                <img src="@(mode == "Overview" ? "icons/Overview_icon_active.svg" : "icons/Overview_icon.svg")" title="View overview" @onclick='() => switchMode("Overview")'/>
                <img src="@(mode == "Table-view" ? "icons/Table-view_icon_active.svg" : "icons/Table-view_icon.svg")" title="View table-view" @onclick='() => switchMode("Table-view")'/>
            </div>*@
            <div id="info-button" title="Select which information to show in the overview">
                <i class="fa fa-info-circle"></i>
            </div>
            <div id="edit-icon" title="Edit overview in table view">
                <i class="fa-solid fa-pen" @onclick='() => switchMode("Table-view")'></i>
            </div>
            <div id="key-selectors">
                @for (int i = 0; i < ClinicalTest.ChosenTableTitles.Length; i++)
                {
                    int tableTitleNumber = i;
                    <div class="key-selector">
                        <span class="selector-number">@(i + 1)</span>
                        <select @onchange="(e) => chooseTableTitle(e, tableTitleNumber)">
                            <option value="-">-</option>
                            @foreach (string tableTitle in ClinicalTest.TableTitles)
                            {
                                @if (ClinicalTest.ChosenTableTitles[i] == tableTitle) 
                                {
                                    <option selected value="@tableTitle">@tableTitle</option>
                                }
                                else
                                {
                                    <option value="@tableTitle">@tableTitle</option>
                                }
                            }
                        </select>
                    </div>
                }
            </div>
            <div id="export-icon" title="Export overview">
                <i class="fa-solid fa-file-export"></i>
            </div>
        </div>
        
        @if (ClinicalTest.Slides.Count != 0)
        {
            <div class="plates">
                @for (int i = 0; i <= ClinicalTest.Slides.Count / 4; i++)
                {
                    <Plate ClinicalTest="@ClinicalTest" PlateNumber=i+1 Slides="ClinicalTest.Slides.GetRange(i*4, (i * 4) + 4 <= ClinicalTest.Slides.Count ? 4 :ClinicalTest.Slides.Count % 4)" />
                }
            </div>
        } 
        else
        {
            <div class="plate">
                <div class="overview-needs-info">
                    <p>
                        @(ClinicalTest.Title) has no clinical data yet.
                        <br>
                        Add clinical data in the table-view to generate the overview.
                    </p>

                    <button class="green-button" @onclick='() => switchMode("Table-view")'>
                        Open table-view
                        @* <img src="icons/Table-view_icon_active.svg" class="btn-icon"/> *@
                        <i class="fa-solid fa-pen"></i>
                    </button>
                </div>
            </div>
        }
    }
    else 
    {
        <div id="toolbar">
            <div id="buttons">
                <span id="info-button" title="Editing overview - insert clinical data in the table">
                    <i class="fa fa-info-circle"></i>
                </span>
                <span id="clear-button" title="Clear entire table" @onclick=clearTable>Clear table</span>
                <span id="xmark-button" title="Continue without saving" @onclick='() => switchMode("Overview")'><i class="fa-solid fa-xmark"></i></span>
                <span id="check-button" title="Continue and save changes" @onclick=savePatientData><i class="fa-solid fa-check"></i></span>
            </div>
        </div>
        <div class="table-view-container">
            <OverviewTable clinicalTest="@ClinicalTest"/>
		</div>
    }

</div>

@code {
    [Parameter]
    public ClinicalTest? ClinicalTest { get; set; }

    //Switch viewmode (Overview or Table-view)
    public string mode { get; set; } = "Overview";
    public void switchMode(string newMode)
    {
        mode = newMode;
    }

    //Update chosen table titles
    void chooseTableTitle(ChangeEventArgs e, int tableTitleNumber)
    {
        string? selectedTableTitle = e.Value?.ToString();
        if (selectedTableTitle == null) return;

        ClinicalTest.ChosenTableTitles[tableTitleNumber] = selectedTableTitle;
    }

    private async void savePatientData() {
        if (ClinicalTest == null) throw new NullReferenceException("ClinicalTest object is null");

        // Remove existing slides
        //ClinicalTest.Slides = new List<Slide>();
        ClinicalTest.Slides.Clear();

        // Get table data from DOM
        string[][] tableData = await JS.InvokeAsync<string[][]>("getTableData");

        // Create list of table titles
        List<string> tableTitles;
        if (tableData.Length > 0 && tableData[0].Length > 0) {
            tableTitles = tableData[0].ToList();
        } else {
            tableTitles = new List<string>();
        }
        ClinicalTest.TableTitles = tableTitles;

        // Add slides to the clinical test
        List<List<string>> patientData = new List<List<string>>();
        for (int i = 1; i < tableData.Length; i++)
        {
            var list = new List<string>();
            for (int j = 0; j < tableData[i].Length; j++)
            {
                list.Add(tableData[i][j]);
            }
            patientData.Add(list);

            if (i % 20 == 0)
            {
                ClinicalTest.AddSlide(
                    slide: new Slide(""),
                    patientData: new List<List<string>>(patientData)
                );
                patientData.Clear();
            }
        }

        // Add last slide with remaining patient data
        ClinicalTest.AddSlide(
            slide: new Slide(""),
            patientData: new List<List<string>>(patientData)
        );

        // Save to database and switch back to the overview
        await ClinicalTest.SaveToDatabase();
        switchMode("Overview");
        StateHasChanged();
    }

    private async void clearTable() {
        await JS.InvokeVoidAsync("clearTable");
    }
}

