@using src.Data

@inject IJSRuntime JS

<div class="overview-component">
    @if (mode == "Overview") {
        <div class="toolbar-container">
            <i id="info-button" title="Select which information to show in the overview" class="fa fa-info-circle"></i>
            <div id="toolbar">
                <div id="edit-icon" data-title="Edit overview in table view" @onclick='() => { tableViewIcon = "icons/TableView_icon.svg"; switchMode("Table-view"); }'>
                    <img src="@tableViewIcon" @onmouseover='() => tableViewIcon = "icons/TableView_icon_hover.svg"' @onmouseout='() => tableViewIcon = "icons/TableView_icon.svg"'/>
                </div>
                <div id="key-selectors">
                    @for (int i = 0; i < ClinicalTest.ChosenTableTitles.Length; i++)
                    {
                        int tableTitleNumber = i;
                        <div class="key-selector">
                            <span class="selector-number">@(i + 1)</span>
                            <select @onchange="(e) => chooseTableTitle(e, tableTitleNumber)">
                                <option value="">-</option>
                                @foreach (string tableTitle in ClinicalTest.TableTitles)
                                {
                                    @if (ClinicalTest.ChosenTableTitles[i] == tableTitle) 
                                    {
                                        <option selected value="@tableTitle">@tableTitle</option>
                                    }
                                    else
                                    {
                                        <option value="@tableTitle">@tableTitle</option>
                                    }
                                }
                            </select>
                        </div>
                    }
                </div>
                <div id="export-icon" data-title="Export overview">
                    <i class="fa-solid fa-file-export"></i>
                </div>
            </div>
        </div>
        
        @if (slides.Count != 0)
        {
            <div class="plates">
                @for (int i = 0; i <= (slides.Count - 1) / 4; i++)
                {
                    <Plate ClinicalTest="@ClinicalTest" PlateIndex=i Slides="slides.GetRange(i * 4, (i * 4) + 4 <= slides.Count ? 4 : slides.Count % 4)"/>
                }
            </div>
        } 
        else
        {
            <div class="plate">
                <div class="overview-needs-info">
                    <p>
                        @(ClinicalTest.Title) has no clinical data yet.
                        <br>
                        Add clinical data in the table-view to generate the overview.
                    </p>

                    <button class="green-button" @onclick='() => { tableViewIcon = "icons/TableView_icon.svg"; switchMode("Table-view"); }' @onmouseover='() => tableViewIconWhite = "icons/TableView_icon_white_hover.svg"' @onmouseout='() => tableViewIconWhite = "icons/TableView_icon_white.svg"'>
                        Open table-view
                        <img src="@tableViewIconWhite"/>
                    </button>
                </div>
            </div>
        }
    }
    else 
    {
        <div class="toolbar-container">
            <i id="info-button" title="Editing overview - insert clinical data in the table" class="fa fa-info-circle"></i>
            <div id="toolbar">
                <div id="buttons">
                    <span id="clear-button" data-title="Clear entire table" @onclick='() => { clearTableIcon = "icons/ClearTable_icon.svg"; clearTable(); }' @onmouseover='() => clearTableIcon = "icons/ClearTable_icon_hover.svg"' @onmouseout='() => clearTableIcon = "icons/ClearTable_icon.svg"'>
                        Clear table
                        <img src="@clearTableIcon"/>
                    </span>
                    <span id="xmark-button" data-title="Continue without saving" @onclick='() => switchMode("Overview")'><i class="fa-solid fa-xmark"></i></span>
                    <span id="check-button" data-title="Continue and save changes" @onclick=savePatientData><i class="fa-solid fa-check"></i></span>
                </div>
            </div>
        </div>
        <div class="table-view-container">
            <OverviewTable ClinicalTest="@ClinicalTest"/>
		</div>
    }

</div>

@code {
    [Parameter, EditorRequired]
    public ClinicalTest ClinicalTest { get; set; } = new();

    private List<Slide> slides { 
        get 
        {
            return ClinicalTest.GetSlides();
        }
    }

    private string tableViewIcon { get; set; } = "icons/TableView_icon.svg";
    private string tableViewIconWhite { get; set; } = "icons/TableView_icon_white.svg";
    private string clearTableIcon{ get; set; } = "icons/ClearTable_icon.svg";

    private const int SlideWidth = 3;
    private const int SlidesInPlate = 21;
    private const int BlocksInSlide = 21;
    private const int BlocksInPlate = 84;

    //Switch viewmode (Overview or Table-view)
    public string mode { get; set; } = "Overview";
    public void switchMode(string newMode)
    {
        mode = newMode;
    }

    //Update chosen table titles
    async void chooseTableTitle(ChangeEventArgs e, int tableTitleNumber)
    {
        string? selectedTableTitle = e.Value?.ToString();
        if (selectedTableTitle == null) return;

        ClinicalTest.ChosenTableTitles[tableTitleNumber] = selectedTableTitle;
        await ClinicalTest.SaveToDatabase();
    }

    private async void savePatientData() {
        if (ClinicalTest == null) throw new NullReferenceException("ClinicalTest object is null");

        // Remove existing slides
        // ClinicalTest.Slides = new List<Slide>();
        slides.Clear();

        // Get table data from DOM
        string[][] tableData = await JS.InvokeAsync<string[][]>("getTableData");

        // Create list of table titles
        List<string> tableTitles;
        if (tableData.Length > 0 && tableData[0].Length > 0) {
            tableTitles = tableData[0].ToList();
        } else {
            tableTitles = new List<string>();
        }
        ClinicalTest.TableTitles = tableTitles;

        // Remove first line from table data
        tableData = tableData.Skip(1).ToArray();

        // Add slides to the clinical test
        var numPlatesTotal = tableData.Length / BlocksInPlate + (tableData.Length % BlocksInPlate == 0 ? 0 : 1);
        var numSlidesTotal = tableData.Length / BlocksInSlide + (tableData.Length % BlocksInSlide == 0 ? 0 : 1);

        // Plates loop
        for (int i = 0; i < numPlatesTotal; i++) {
            int numSlides = (i * 4) + 4 <= numSlidesTotal ? 4 : numSlidesTotal % 4;
            List<string>[][] plate = new string[numSlides][][].Select(blocks => new List<string>[BlocksInSlide]).ToArray();

            // Slides loop
            for (int j = 0; j < numSlides; j++) {
                int numBlocks = (i * BlocksInPlate + j * BlocksInSlide) + BlocksInSlide <= tableData.Length ? BlocksInSlide : tableData.Length % BlocksInSlide;

                // Blocks loop
                for (int k = 0; k < numBlocks; k++) {
                    int index = i * 84 + j * 21 + k;
                    int slideIndex = index % 84 / 3 % numSlides;
                    int blockIndex = (index % 3) + (index % 84 / (numSlides * 3) * 3);
                    plate[slideIndex][blockIndex] = tableData[index].ToList();
                }
            }

            for (int j = 0; j < numSlides; j++) {
                ClinicalTest.AddSlide(
                    slide: new Slide(""),
                    patientData: plate[j]
                );
            }
        }

        // Save to database and switch back to the overview
        await ClinicalTest.SaveToDatabase();
        switchMode("Overview");
        StateHasChanged();
    }

    private async void clearTable() {
        await JS.InvokeVoidAsync("clearTable");
    }
}
