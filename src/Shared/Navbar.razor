@inject NavigationManager NavManager
@using src.Data
@using System.Timers

<header id="topnavContainer">
        @if (databaseStatus == 1)
        {
            <div id="saving-status">
                <i class="fa-solid fa-check"></i>
            </div>
        }
        else
        {
            <div id="saving-status" style="background: conic-gradient(red 0deg @((int)(databaseStatus * 360))deg, transparent @((int)(databaseStatus * 360))deg 360deg)">
                <i class="fa-solid fa-xmark"></i>
            </div>
        }    
    <div id="topPart">
        <div id="leftPart">
            <button id="homeButton" title="Go back to list of experiments and clinical tests">
                <i @onclick="NavigateToHomepage" class="fa-solid fa-house"></i>
            </button>
        </div>
        <h1 id="middlePart">
            <span class="ct-title">@ClinicalTestTitle</span> in @ExperimentNumber
        </h1>
        <div id="rightPart">
        </div>
    </div>

    <div id="navButtonContainer">    
        <button id="details" @onclick="() => SetActiveButton(0)" class="@((ActiveButton == 0 ? "active" : ""))">
            Details
        </button>
        <button id="overview" @onclick="() => SetActiveButton(1)" class="@((ActiveButton == 1 ? "active" : ""))">
            Overview
        </button>
        <button id="fileUpload" @onclick="() => SetActiveButton(2)" class="@((ActiveButton == 2 ? "active" : ""))">
            File Upload
        </button>
        <button id="resultTable" @onclick="() => SetActiveButton(3)" class="@((ActiveButton == 3 ? "active" : ""))">
            Result Table
        </button>
        <button id="heatmap" @onclick="() => SetActiveButton(4)" class="@((ActiveButton == 4 ? "active" : ""))">
            Heatmap
        </button>
    </div>
</header>

@code {
    [Parameter]
    public string ClinicalTestTitle { get; set; } = "";
    [Parameter]
    public string ExperimentNumber { get; set; } = "";
    [Parameter]
    public string ClinicalTestId { get; set; } = "";
    [Parameter]
    public int ActiveButton { get; set; }

    [Parameter]
    public EventCallback<int> setActiveButtonCallback { get; set; }

    
    private double databaseStatus { get; set; }
    private Timer? databaseTimer { get; set; } = null;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (databaseTimer == null)
            {
                startTimer();
            }
        }
    }

    private void startTimer()
    {
        databaseTimer = new Timer(300);
        databaseTimer.Elapsed += TimerHandler;
        databaseTimer.AutoReset = true;
        databaseTimer.Enabled = true;
    }

    private void TimerHandler(Object? source, ElapsedEventArgs e)
    {
        databaseStatus = ProcessQueue.Instance.GetProgress(ClinicalTestId);
        InvokeAsync(() => StateHasChanged());
    }


    public void NavigateToHomepage() {
        NavManager.NavigateTo("/");
    }

    public async void SetActiveButton(int buttonID)
    {
        await setActiveButtonCallback.InvokeAsync(buttonID);
    }
}