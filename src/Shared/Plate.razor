@using src.Data

@{
    int maxSlides = 4;
    int numSlides = Slides.Count;
}
<div class="plate numSlides@(numSlides)">
    <div class="container">
        <div class="Letters">
            @foreach (string letter in headingLetters)
            {
                <div class="heading">@(letter)</div>
            }
        </div>
        @for (int i = 0; i < maxSlides; i++)
        {
            <div class="Slide-@(i+1)">
                @for (int j = 0; j < 21; j++)
                {
                <div class="block">
                    @if (i < numSlides)
                    {
                        @for (int k = 0; k < 3; k++)
                        {
                            <div>Type@(k)</div>
                            @*int index = k;
                            string dataString = ClinicalTest.TableTitles[findTitleIndex(index)];
                            <div>
                                @if (dataString != null)
                                {
                                    @(dataString)
                                }
                            </div>   *@
                        }
                    }
                    else
                    {
                        <div></div>
                    }
                </div>
                }
            </div>
        }

        <div class="Numbers">
            @for (int i = 0; i < 12; i++)
            {
                <div class="heading">@(i+1)</div>
            }
        </div>
        @for (int i = 0; i < maxSlides; i++)
        {
            int slideIndex = (PlateIndex*4) + i;
            <div class="Barcode-@(i+1)">
                @if (i < numSlides)
                {
                    <input type="text" placeholder="Enter barcode..." value="@(ClinicalTest.Slides[i].Barcode)" @onchange="(e) => enterBarcode(e, slideIndex)">
                }
            </div>
        }
        <div class="Empty"></div>
    </div>
</div>


@code
{
    [Parameter, EditorRequired]
    public ClinicalTest ClinicalTest { get; set; } = new();

    [Parameter]
    public int PlateIndex { get; set; }

    [Parameter, EditorRequired]
    public List<Slide> Slides { get; set; } = new();

    private int findTitleIndex(int i)
    {
        return ClinicalTest.TableTitles.IndexOf(ClinicalTest.ChosenTableTitles[i]);
    }

    //Update barcode for a slide
    async void enterBarcode(ChangeEventArgs e, int slideIndex)
    {
        string? enteredBarcode = e.Value?.ToString();
        if (enteredBarcode == null) return;

        ClinicalTest.Slides[slideIndex].Barcode = enteredBarcode;
        await ClinicalTest.SaveToDatabase();
    }

    private int numCols = 13;
    private int numRows = 9;

    private string[] headingLetters = { "A", "B", "C", "D", "E", "F", "G", "H" };
}
