@using src.Data
@using src.Shared

<div class="heatmap-component">
    <div class="heatmap-and-scale">
        <div class="all-heatmap-cells">
            <table class ="heatmap-table">
                <thead>
                    <tr class="heatmap-header">
                        @{int j = 1;}
                        @foreach (string chosenTableTitle in ClinicalTest.ChosenTableTitles)
                        {
                            if (chosenTableTitle != null) {
                                <th class="key-header" id="key-number-@j">@chosenTableTitle</th>
                                j++;
                            }
                        }
                        @foreach (string analyteName in ClinicalTest.AnalyteNames) 
                        {
                            <th title="@analyteName">@analyteName</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @{
                        getSortedBlocks();
                    }
                        @foreach(Block block in allBlocks) {
                            <tr>
                                @{int k = 1;}
                                @foreach (string chosenTableTitle in ClinicalTest.ChosenTableTitles)
                                {
                                    if (chosenTableTitle != null)
                                    {
                                        <td class="key-data key-number-@k">@block.PatientData[ClinicalTest.TableTitles.IndexOf(chosenTableTitle)]</td>
                                        k++;
                                    }
                                }
                                @foreach (Nplicate nplicate in block.Nplicates) 
                                {
                                    <td title="@nplicateTitleHelper(nplicate)"
                                        class="flagged-@nplicate.IsFlagged.ToString().ToLower() selected-@((nplicate == clickedNplicate).ToString().ToLower() )" 
                                        style="background-color: @System.Drawing.ColorTranslator.ToHtml(nplicate.HeatmapColour);"
                                        @onclick="() => nplicateClicked(nplicate)"></td>
                                }
                            </tr>    
                        }                    
                </tbody>
            </table>
        </div>
        <div class="export-and-color-scale">
            <div id="export-icon" title="Export heatmap">
                <i class="fa-solid fa-file-export"></i>
            </div>
            <div class="flag-example">
                Flag
            </div>
            <div class="color-scale-container">
                <div class="color-scale">
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                </div>
                <div class="color-scale-index">
                    <p>@Math.Round(ClinicalTest.MaxRI,1)</p>
                    <p>@(Math.Round((ClinicalTest.MinRI + (ClinicalTest.MaxRI - ClinicalTest.MinRI)*0.75),1))</p>
                    <p>@(Math.Round((ClinicalTest.MinRI + (ClinicalTest.MaxRI - ClinicalTest.MinRI)*0.50),1))</p>
                    <p>@(Math.Round((ClinicalTest.MinRI + (ClinicalTest.MaxRI - ClinicalTest.MinRI)*0.25),1))</p>
                    <p>@(Math.Round(ClinicalTest.MinRI,1)) </p>
                </div>
            </div>
        </div>
    </div>
</div>

@if (showSpotModal)
{
    <SpotModal 
        ModalCancelCallback="closeSpotModal"
        ShownNplicate="@clickedNplicate"/>
}

@code {

    private bool showSpotModal = false;
    private List<Block> allBlocks = new();
    private Nplicate clickedNplicate = new();

    [Parameter]
    public ClinicalTest ClinicalTest { get; set; } = new();

    private void nplicateClicked(Nplicate nplicate) 
    {
        clickedNplicate = nplicate;
        showSpotModal = true;
        StateHasChanged();
    }

    private void closeSpotModal() 
    {
        showSpotModal = false;
        clickedNplicate = null;
        StateHasChanged();
    }

    private async void getSortedBlocks() 
    {
        List<Block> blocks = new();
        blocks = await ClinicalTest.GetNormalBlocks();
        blocks.Sort(delegate(Block x, Block y)
            {
                if (x.PlateIndex == y.PlateIndex)
                {
                    return y.PlateIndex - x.PlateIndex;
                }
                else
                {
                    return y.SlideIndex - x.SlideIndex;
                }
            });
        allBlocks = blocks;
    }
    private string nplicateTitleHelper(Nplicate n) 
    {
        return "RI: " + Math.Round(n.RI,3) + "\nXYZ: " + Math.Round(n.XYZ,3) + "\nMean intensity: " + Math.Round(n.Mean,3) + "\nAnalyte: " + n.AnalyteType;
    }
}
