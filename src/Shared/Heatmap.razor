@using src.Data
@using src.Shared

@inject IJSRuntime JS


<div class="heatmap-component">
    <div class="heatmap-and-scale">
        <div class="all-heatmap-cells">
            <table class ="heatmap-table">
                <thead>
                    <tr class="heatmap-header">
                        @{int j = 1;}
                        @foreach (string chosenTableTitle in ClinicalTest.ChosenTableTitles)
                        {
                            if (chosenTableTitle != null) {
                                <th class="key-header" id="key-number-@j">@chosenTableTitle</th>
                                j++;
                            }
                        }
                        @foreach (string analyteName in ClinicalTest.AnalyteNames) 
                        {
                            <th title="@analyteName">@analyteName</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach(Block block in allBlocks) {
                        <tr>
                            @{int k = 1;}
                            @foreach (string chosenTableTitle in ClinicalTest.ChosenTableTitles)
                            {
                                if (chosenTableTitle != null)
                                {
                                    <td class="key-data key-number-@k">@block.PatientData[ClinicalTest.TableTitles.IndexOf(chosenTableTitle)]</td>
                                    k++;
                                }   
                            }
                            @foreach (Nplicate nplicate in block.Nplicates) 
                            {
                                <td title="@nplicateTitleHelper(nplicate)"
                                    class="flagged-@nplicate.IsFlagged.ToString().ToLower() selected-@((nplicate == clickedNplicate).ToString().ToLower() )" 
                                    style="background-color: @System.Drawing.ColorTranslator.ToHtml(nplicate.HeatmapColour);"
                                    @onclick="() => nplicateClicked(nplicate)"></td>
                            }
                        </tr>    
                    }                    
                </tbody>
            </table>
        </div>
        <div class="export-and-color-scale">
            <div id="export-icon" title="Export heatmap">
                <i class="fa-solid fa-file-export" @onclick="OpenExportModal"></i>
            </div>
            <div class="flag-example">
                Flag
            </div>
            <div class="color-scale-container">
                <div class="color-scale">
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                </div>
                <div class="color-scale-index">
                    <p>@Math.Round(ClinicalTest.MaxRI,1)</p>
                    <p>@(Math.Round((ClinicalTest.MinRI + (ClinicalTest.MaxRI - ClinicalTest.MinRI)*0.75),1))</p>
                    <p>@(Math.Round((ClinicalTest.MinRI + (ClinicalTest.MaxRI - ClinicalTest.MinRI)*0.50),1))</p>
                    <p>@(Math.Round((ClinicalTest.MinRI + (ClinicalTest.MaxRI - ClinicalTest.MinRI)*0.25),1))</p>
                    <p>@(Math.Round(ClinicalTest.MinRI,1)) </p>
                </div>
            </div>
        </div>
    </div>
</div>

@if (showSpotModal)
{
    <SpotModal 
        ModalCancelCallback="closeSpotModal"
        ShownNplicate="@clickedNplicate"/>
}

@if (showExportModal)
{
    <ExportModal ModalCancelCallback="CloseExportModal"
             ExportCallback="Export" />
}

@code {

    private bool showSpotModal = false;
    private bool showExportModal = false;
    private List<Block> allBlocks = new();
    private Nplicate? clickedNplicate = new();

    [Parameter]
    public ClinicalTest ClinicalTest { get; set; } = new();


    protected override async Task OnAfterRenderAsync(bool firstRender)  
    {
        if (firstRender) {
            allBlocks = await ClinicalTest.GetSortedBlocks();
            StateHasChanged();
        }
    }

    private void nplicateClicked(Nplicate nplicate) 
    {
        clickedNplicate = nplicate;
        showSpotModal = true;
        StateHasChanged();
    }

    private void closeSpotModal() 
    {
        showSpotModal = false;
        clickedNplicate = null;
        StateHasChanged();
    }

    private string nplicateTitleHelper(Nplicate n) 
    {
        return "RI: " + Math.Round(n.RI,3) + "\nXYZ: " + Math.Round(n.XYZ,3) + "\nMean intensity: " + Math.Round(n.Mean,3) + "\nAnalyte: " + n.AnalyteType;
    }

    public async void Export(string withFlags)
    {
        if (ClinicalTest == null) return;
        FileInfo file = await ClinicalTest.ExportHeatmap(withFlags);
        await JS.InvokeVoidAsync("triggerFileDownload", withFlags == "withFlags" ? $"{ClinicalTest.Title}-heatmap-with-flags.xlsx" : $"{ClinicalTest.Title}-heatmap-without-flags.xlsx", $"http://localhost:5110/exports/{ClinicalTest.id}-heatmap.xlsx");
        await Task.Delay(1000).ContinueWith(t => file.Delete());
    }

    public void OpenExportModal()
    {
        showExportModal = true;
    }

    public void CloseExportModal()
    {
        showExportModal = false;
    }
}
