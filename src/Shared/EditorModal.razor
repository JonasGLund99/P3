@using src.Data
@typeparam ModalType where ModalType : new() 

<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
   <div class="modal-dialog">
      <div class="modal-content">
         <div class="modal-header">
            <h4 class="modal-title">@ModalTitle</h4>
         </div>

         <form onsubmit="@(() => saveEdits())">
            <div class="modalContent">
               @if(ModalObject is Experiment)
               {
                  <p>Experiment Number</p>
                  <input type="text" required @bind="((Experiment)((object)ModalObject)).ExperimentNumber"/>
                  
                  <p>Title</p>
                  <input type="text" required @bind="((Experiment)((object)ModalObject)).Title" />
                  
                  <p>Author</p>
                  <input type="text" required @bind="((Experiment)((object)ModalObject)).Author"/>
                  
                  <p>Created At</p>
                  <input type="date" required @bind="((Experiment)((object)ModalObject)).CreatedAt" />
                  
                  <p>Description</p>
                  <textarea @bind="((Experiment)((object)ModalObject)).Description"/>
               } else
               {
                  <p>Title</p>
                  <input type="text" required @bind="((ClinicalTest)((object)ModalObject)).Title"/>
                  
                  <p>Created At</p>
                  <input type="date" required @bind="((ClinicalTest)((object)ModalObject)).CreatedAt"/>

                  <p>N-plicate size</p>
                  <input type="number" required min="1" @bind="((ClinicalTest)((object)ModalObject)).NplicateSize"/>

                  <p>Description</p>
                  <textarea @bind="((ClinicalTest)((object)ModalObject)).Description"/>
                  
                  <div class="associator">
                     <div class="search-experiments">
                        <div class="searchbar">
                           <i class="fa-solid fa-magnifying-glass"></i>
                           <input type="text" placeholder="Search experiment..." @oninput="@searchExperiments">
                        </div>
                        <div class="experiments-found">
                        @foreach (Experiment e in searchedExperiments)
                        {
                           if (((ClinicalTest)((object)ModalObject)).ExperimentIds.Contains(e.id))
                           {
                              <p class="experiment-is-added" title="@titleHelper(e)" >@e.ExperimentNumber</p>
                           } else 
                           {
                              <p title="@titleHelper(e)" @onclick="@(() => clickedExperimentToRelate(e.id))">@e.ExperimentNumber</p>
                           }

                        }
                        </div>
                     </div>
                     <div class="associated-experiments">
                        <div class="related-experiments">
                        @foreach (string id in ((ClinicalTest)((object)ModalObject)).ExperimentIds)
                        {
                            <p title="@titleHelperRelatedExperiments(id)" @onclick="@(() => clickedRelatedExperiment(id))">@(getRelatedExperimentNumber(id))</p>
                        }
                        </div>
                     </div>
                  </div>
                  }
            </div>
                  
            <div class="modal-footer">
               <button type="button" class="grey-button" @onclick="cancelEdits">Cancel</button>
               <button type="submit" class="green-button">Save</button>
            </div>

         </form>
      </div>
   </div>
</div>


@code {
    [Parameter] 
    public string ModalTitle { get; set; } = "";
    [Parameter] 
    public EventCallback<ModalType> CallbackClose {get; set;}
    [Parameter] 
    public ModalType ModalObject { get; set; }
    [Parameter] 
    public EventCallback<ModalType> CallbackSave {get; set;}

    private List<Experiment> allExperiments = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {
            allExperiments = await ExperimentManager.QueryExperiments("");
            StateHasChanged();
        }
    }

    private string titleHelper(Experiment e)
    {
        return "Author: " + e.Author + "\nTitle: " + e.Title + "\nCreated: " + e.CreatedAt + "\nLast edit: " + e.EditedAt;
    }

    //this not works
    private string titleHelperRelatedExperiments(string id)
    {
      Console.WriteLine(id);
      Experiment experiment = allExperiments.Find((e) => e.id == id);
      return titleHelper(experiment);
    } 

    private List<Experiment> searchedExperiments = new(); 

    private async void saveEdits()
    {
        await CallbackSave.InvokeAsync(ModalObject);
    }

    private async void cancelEdits()
    {
        await CallbackClose.InvokeAsync(ModalObject);
    }

    private async void searchExperiments(ChangeEventArgs args) 
    {
        string experimentSearchValue = args.Value?.ToString();
        if (experimentSearchValue == null) return;
        searchedExperiments = await ExperimentManager.QueryExperiments(experimentSearchValue);
        StateHasChanged();
    }

    private string getRelatedExperimentNumber(string id) 
    {
        string nr = "";
        foreach (Experiment e in allExperiments)
        {
            if (e.id == id)
                nr = e.ExperimentNumber;
        }
        return nr;
    }

    private void clickedRelatedExperiment(string experimentId) 
    {
        ClinicalTest clinicalTest = (ClinicalTest)((object)ModalObject);
        clinicalTest.ExperimentIds.Remove(experimentId);
        StateHasChanged();
    }

    private void clickedExperimentToRelate(string experimentId)
    {
        ClinicalTest clinicalTest = (ClinicalTest)((object)ModalObject);
        clinicalTest.ExperimentIds.Add(experimentId);
        StateHasChanged();
    }
}
