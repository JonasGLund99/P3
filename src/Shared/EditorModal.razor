@using src.Data
@typeparam ModalType where ModalType : new() 

<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                @if (ModalObject is Experiment)
                {
                    <img src="icons/expIcon_blue.svg"/>
                }
                else
                {
                    <img src="icons/ctIcon_blue.svg"/>
                }
                <h4 class="modal-title">@(ModalTitle.Contains(":") ? ModalTitle.Split(": ")[1] : ModalTitle)</h4>
                @if (ModalTitle.Contains("Edit"))
                {
                    <i class="fa-solid fa-pencil"></i>
                }
                else
                {
                    <i class="fa-solid fa-square-plus"></i>
                }
            </div>

            <form onsubmit="@(() => saveEdits())">
                <div class="modalContent">
                    @if (ModalObject is Experiment)
                    {
                        @*Experiment Modal*@
                        <p>Experiment number</p>
                        <input type="text" placeholder="Enter experiment number" required @bind="((Experiment)((object)ModalObject)).ExperimentNumber"/>
                  
                        <p>Title</p>
                        <input type="text" placeholder="Enter title of experiment" required @bind="((Experiment)((object)ModalObject)).Title" />
                        
                        <div class="input-container">
                            <div class="half">
                                <p>Author</p>
                                <input type="text" placeholder="Name of author" required @bind="((Experiment)((object)ModalObject)).Author" />
                            </div>
                            <div class="half">
                                <p>Created</p>
                                <input type="date" required @bind="((Experiment)((object)ModalObject)).CreatedAt" />
                            </div>
                        </div>

                  
                        <p>Description</p>
                        <textarea placeholder="Write a short description.." @bind="((Experiment)((object)ModalObject)).Description"/>
                    } 
                    else
                    {
                        @*ClinicalTest Modal*@
                        <p>Title</p>
                        <input type="text" placeholder="Enter title of clinical test" required @bind="((ClinicalTest)((object)ModalObject)).Title" />
                        
                        <div class="input-container">
                            <div class="half">
                                <p>n-plicate size</p>
                                <input type="number" placeholder="3" required min="1" @bind="((ClinicalTest)((object)ModalObject)).NplicateSize" />
                            </div>
                            <div class="half">
                                <p>Created</p>
                                <input type="date" required @bind="((ClinicalTest)((object)ModalObject)).CreatedAt"/>
                            </div>
                        </div>
                        <p>Description</p>
                        <textarea placeholder="Write a short description.." @bind="((ClinicalTest)((object)ModalObject)).Description" />
                        
                        <p>Associate experiments</p>
                        <div class="associator">
                            <div class="search-experiments">
                            <div class="searchbar">
                                <i class="fa-solid fa-magnifying-glass"></i>
                                <input type="text" placeholder="Search experiment..." @oninput="@searchExperiments">
                            </div>
                            <div class="experiments-found">
                            @foreach (Experiment e in searchedExperiments)
                            {
                                if (((ClinicalTest)((object)ModalObject)).ExperimentIds.Contains(e.id))
                                {
                                    <div class="experiment-is-added" @onclick="@(() => clickedRelatedExperiment(e.id))" title="@titleHelper(e)" >@e.ExperimentNumber</div>
                                } 
                                else 
                                {
                                    <div title="@titleHelper(e)" @onclick="@(() => clickedExperimentToRelate(e.id))">@e.ExperimentNumber</div>
                                }
                            }
                            </div>
                            </div>
                            <div class="associated-experiments">
                            <p>Associated experiments</p>
                            <div class="related-experiments">
                                @foreach (string id in ((ClinicalTest)((object)ModalObject)).ExperimentIds)
                                {
                                    <div title="@titleHelperRelatedExperiments(id)" @onclick="@(() => clickedRelatedExperiment(id))">@(getRelatedExperimentNumber(id))</div>
                                }
                            </div>
                            </div>
                        </div>
                    }
                </div>
                  
                <div class="modal-footer">
                    <button type="button" class="grey-button" @onclick="cancelEdits">Cancel</button>
                        @if (ModalObject is ClinicalTest && ((ClinicalTest)((object)ModalObject)).ExperimentIds.Count <= 0){
                            <button type="button" class="green-button" style="opacity: 0.5"disabled>No associated experiments</button>
                        }
                        else{
                            <button type="submit" class="green-button">Save</button>
                        }
                </div>
            </form>
        </div>
    </div>
</div>


@code {
    [Parameter, EditorRequired] 
    public string ModalTitle { get; set; } = "";
    [Parameter, EditorRequired] 
    public EventCallback<ModalType> CallbackClose {get; set;}
    [Parameter, EditorRequired] 
    public ModalType ModalObject { get; set; } = new();
    [Parameter, EditorRequired] 
    public EventCallback<ModalType> CallbackSave {get; set;}

    private List<Experiment> allExperiments = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {
            allExperiments = await ExperimentManager.QueryExperiments("");
            searchedExperiments = allExperiments;
            StateHasChanged();
        }
    }

    private string titleHelper(Experiment e)
    {
        return "Author: " + e.Author + "\nTitle: " + e.Title + "\nCreated: " + e.CreatedAt + "\nLast edit: " + e.EditedAt;
    }

    private string titleHelperRelatedExperiments(string id)
    {
        Experiment experiment = allExperiments.Find((e) => e.id == id);
        return experiment == null ? "" : titleHelper(experiment);
    } 

    private List<Experiment> searchedExperiments = new(); 

    private async void saveEdits()
    {
        await CallbackSave.InvokeAsync(ModalObject);
    }

    private async void cancelEdits()
    {
        await CallbackClose.InvokeAsync(ModalObject);
    }

    private async void searchExperiments(ChangeEventArgs args) 
    {
        string experimentSearchValue = args.Value?.ToString();
        if (experimentSearchValue == null) return;
        searchedExperiments = await ExperimentManager.QueryExperiments(experimentSearchValue);
        StateHasChanged();
    }

    private string getRelatedExperimentNumber(string id) 
    {
        string nr = "";
        foreach (Experiment e in allExperiments)
        {
            if (e.id == id)
                nr = e.ExperimentNumber;
        }
        return nr;
    }

    private void clickedRelatedExperiment(string experimentId) 
    {
        ClinicalTest clinicalTest = (ClinicalTest)((object)ModalObject);
        clinicalTest.ExperimentIds.Remove(experimentId);
        StateHasChanged();
    }

    private void clickedExperimentToRelate(string experimentId)
    {
        ClinicalTest clinicalTest = (ClinicalTest)((object)ModalObject);
        clinicalTest.ExperimentIds.Add(experimentId);
        StateHasChanged();
    }
}
