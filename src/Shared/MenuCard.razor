@using src.Data
@typeparam MenuCardType where MenuCardType : new()


<div class="card-content">
    @if (obj is Experiment)
    {
        <div class="card-textcontent-experiment active-experiment-@(((((Experiment)(object)obj)).id == ((Experiment)(object)selectedObj)?.id).ToString().ToLower())"
        @onclick="objectOnclick">
            <span>@(((Experiment)((object)obj)).ExperimentNumber)</span>
            <span>@(((Experiment)((object)obj)).Author)</span>
            <span>@(((Experiment)((object)obj)).Title)</span>
            <span>@(((Experiment)((object)obj)).CreatedAt?.ToShortDateString())</span>
            <span>@(((Experiment)((object)obj)).EditedAt.ToString("dd/MM/yyyy hh:mm"))</span>
            <i class="fa-solid fa-pencil" @onclick="editObject" @onclick:stopPropagation="true"
            @onclick:preventDefault="true"></i>
            <i class="fa-solid fa-trash" @onclick="deleteObject" @onclick:stopPropagation="true"
            @onclick:preventDefault="true"></i>
        </div>

    }
    else
    {
        <div class="card-textcontent-clinicaltest active-clinicaltest-@((((ClinicalTest)(object)obj) == (ClinicalTest)(object)selectedObj).ToString().ToLower())"
        @onclick="objectOnclick">
            <span>@(((ClinicalTest)((object)obj)).Title)</span>
            <span>@(((ClinicalTest)((object)obj)).CreatedAt?.ToShortDateString())</span>
            <span>@(((ClinicalTest)((object)obj)).EditedAt.ToString("dd/MM/yyyy hh:mm"))</span>
            <i class="fa-solid fa-pencil" @onclick="editObject" @onclick:stopPropagation="true"
            @onclick:preventDefault="true"></i>
            <i class="fa-solid fa-trash" @onclick="deleteObject" @onclick:stopPropagation="true"
            @onclick:preventDefault="true"></i>
        </div>
    }
</div>

@code {
    [Parameter] public MenuCardType obj { get; set; } = new();
    [Parameter] public EventCallback<MenuCardType> objectOnclickCallback { get; set; }
    [Parameter] public EventCallback<MenuCardType> objectEditCallback { get; set; }
    [Parameter] public EventCallback<MenuCardType> objectDeleteCallback { get; set; }
    [Parameter] public MenuCardType selectedObj { get; set; } = new();

    private async void deleteObject()
    {
        await objectDeleteCallback.InvokeAsync(obj);
    }

    private async void editObject()
    {
        await objectEditCallback.InvokeAsync(obj);
    }

    private async void objectOnclick()
    {
        await objectOnclickCallback.InvokeAsync(obj);
    }
}
