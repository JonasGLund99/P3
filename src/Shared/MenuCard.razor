@using src.Data
@typeparam MenuCardType

<!--Usage
	<ExperimentCard exp=experiment object/>
-->

<div class="card_Content" >
   <div class="cardTextcontent_@(typeof(MenuCardType).Name)" @onclick="objectOnclick">
      @if (obj is Experiment)
      {
         <span>@(((Experiment)((object)obj)).ExperimentNumber)</span>
         <span>@(((Experiment)((object)obj)).Title)</span>
         <span>@(((Experiment)((object)obj)).Author)</span>
         <span>@(((Experiment)((object)obj)).CreatedAt?.ToShortDateString())</span>
         <span>@(((Experiment)((object)obj)).EditedAt)</span>
      } else 
      {
         <span>@(((ClinicalTest)((object)obj)).Title)</span>
         <span>@(((ClinicalTest)((object)obj)).CreatedAt?.ToShortDateString())</span>
         <span>@(((ClinicalTest)((object)obj)).EditedAt)</span>
      }
   </div>
   <i class="fa-solid fa-pencil" @onclick="editObject"></i>
   <i class="fa-solid fa-trash" @onclick="deleteObject"></i>  
</div>

@code {
	[Parameter] public MenuCardType obj { get; set; }
   [Parameter] public EventCallback<MenuCardType> objectOnclickCallback {get; set; }
   [Parameter] public EventCallback<MenuCardType> objectEditCallback {get; set; }
   [Parameter] public EventCallback<MenuCardType> objectDeleteCallback {get; set; }

   private async void deleteObject() 
   {
      await objectDeleteCallback.InvokeAsync(obj);
   }

   private async void editObject() 
   {
      await objectEditCallback.InvokeAsync(obj);
   }

   private async void objectOnclick() 
   {
      await objectOnclickCallback.InvokeAsync(obj);
   }
   
}
