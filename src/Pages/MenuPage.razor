@page "/"
@using src.Data
@using src.Shared
@inject NavigationManager NavManager

<PageTitle>Clinical Immunology | Manage experiments and clinical tests</PageTitle>

<main>
    <div id="experiments-container">
        <div id="experiment-header" class="menu-header">
            <img src="icons/expIcon_white.svg"/>
            Experiments
        </div>
        <div class="toolbar">
            <button class="add-element-button experiment" @onclick="openNewExperimentModal">
                <i class="fa-solid fa-square-plus"></i>
                Add experiment
            </button>
            <div title="Search for experiment" class="searchbar">
                <i class="fa-solid fa-magnifying-glass"></i>
                <input type="text" placeholder="Search by experiment number, title, author or date..." @oninput="@searchExperiments">
            </div>
        </div>
        <div id="experiment-grid">
            <div class="grid-header">
                <div>Exp. no.</div>
                <div>Author</div>
                <div>Title</div>
                <div>Created</div>
                <div>Edited</div>
            </div>

            @if (loadingExp)
            {
                @*When loading: Display 10 ghost elements*@
                <div class="all-experiment-cards">
                    @for (int i = 0; i < 10; i++)
                    {
                        <div class="grid-content expGhost">
                            <MenuCard MenuCardType="@Experiment"
                                    objectDeleteCallback="MenuCardDeleteCallback"
                                    objectEditCallback="MenuCardEditCallback"
                                    objectOnclickCallback="MenuCardOnclickCallback"
                                    obj="@placeholderExp"
                                    selectedObj="null" />
                        </div>
                    }
                </div>
            }
            else if (experiments != null)
            {
                <div class="all-experiment-cards">
                    @foreach (Experiment e in experiments)
                    {
                        <div class="grid-content active-@((e == selectedExp).ToString().ToLower())">
                            <MenuCard 
                                MenuCardType="@Experiment" 
                                objectDeleteCallback="MenuCardDeleteCallback"
                                objectEditCallback="MenuCardEditCallback" 
                                objectOnclickCallback="MenuCardOnclickCallback"
                                obj="@e" 
                                selectedObj="@selectedExp" />
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="no-clinical-tests">
                    <p>
                        No experiments in the database
                    </p>
                    <button class="add-element-button experiment" @onclick="openNewExperimentModal">
                        <i class="fa-solid fa-square-plus"></i>
                        Add experiment
                    </button>
                </div>
            }
        </div>
    </div>
    <div id="clinical-test-container">
        <div id="clinical-test-header" class="menu-header">
            <img src="icons/ctIcon_white.svg" />
            Clinical Tests
        </div>
        <div class="clinicaltest-content-empty-@((selectedExp == null).ToString().ToLower())">
            @if (selectedExp != null && showExperimentModal == false)
            {
                <div class="toolbar">
                    <button class="add-element-button clinicaltest" @onclick="openNewClinicalTestModal">
                        <i class="fa-solid fa-square-plus"></i>
                        Add clinical test
                    </button>
                    <div title="Search for clinical test" class="ct-searchbar">
                        <i class="fa-solid fa-magnifying-glass"></i>
                        <input type="text" placeholder="Search by title or barcode...">
                    </div>
                </div>
                <div id="clinical-test-grid">
                    <div class="grid-header-clinicalTest">
                        <div>Title</div>
                        <div>Created</div>
                        <div>Edited</div>
                    </div>

                    @if (loadingCt)
                    {
                        @*When loading: Display 1 ghost elements*@
                        <div class="all-experiment-cards">
                            @for (int i = 0; i < 3; i++)
                            {
                                <div class="grid-content ctGhost">
                                    <MenuCard MenuCardType="@ClinicalTest"
                                    objectDeleteCallback="MenuCardDeleteCallback"
                                    objectEditCallback="MenuCardEditCallback"
                                    objectOnclickCallback="MenuCardOnclickCallback"
                                    obj="@placeholderCt"
                                    selectedObj="null" />
                                </div>
                            }
                        </div>
                    }
                    else if (currentClinicalTests.Count() != 0)
                    {
                        <div class="all-clinicaltest-cards">
                            @foreach (ClinicalTest ct in currentClinicalTests)
                            {
                                <div class="grid-content active-@((ct == selectedCT).ToString().ToLower())">
                                    <MenuCard 
                                        MenuCardType="@ClinicalTest" 
                                        objectDeleteCallback="MenuCardDeleteCallback"
                                        objectEditCallback="MenuCardEditCallback" 
                                        objectOnclickCallback="MenuCardOnclickCallback"
                                        obj="@ct" 
                                        selectedObj="@selectedCT" />
                                </div>
                            }
                        </div> 
                    }
                    else
                    {
                        <div class="no-clinical-tests">
                            <p>
                                Experiment contains no clinical tests
                            </p>
                            <button class="add-element-button clinicaltest" @onclick="openNewClinicalTestModal">
                                <i class="fa-solid fa-square-plus"></i>
                                Add clinical test
                            </button>

                        </div>
                    }
                </div>
            }
            else
            {
                if (showExperimentModal == false)
                {
                    <p>
                        Select an experiment
                        <br>
                        or
                    </p>
                    <button class="add-element-button experiment" @onclick="openNewExperimentModal">
                        <i class="fa-solid fa-square-plus"></i>
                        Add experiment
                    </button>
                }
            }
        </div>
    </div>
</main>



@if (showExperimentModal)
{
    <EditorModal 
             CallbackClose="closeEditorModal"
             CallbackSave="SaveExperimentCallback"
             ModalObject="@selectedExp"
             ModalType="@Experiment"
             ModalTitle="@EditorModalTitle" />
}

@if (showClinicalTestModal)
{
    <EditorModal 
             CallbackClose="closeEditorModal"
             CallbackSave="SaveClinicalTestCallback"
             ModalObject="@selectedCT"
             ModalType="@ClinicalTest"
             ModalTitle="@EditorModalTitle" />
}

@if (showCancelConfirmModalDeleteExperiment)
{
    <CancelOrConfirmModal
        ModalType="@Experiment"
        Title="@cancelConfirmModalTitle"
        Body="@cancelConfirmModalBody"
        CallbackCancel="@(() => showCancelConfirmModalDeleteExperiment = false)"
        CallbackConfirm="deleteExperiment"
    />
} 


@if (showCancelConfirmModalDeleteClinicalTest)
{
    <CancelOrConfirmModal
        ModalType="@ClinicalTest"
        Title="@cancelConfirmModalTitle"
        Body="@cancelConfirmModalBody"
        CallbackCancel="@(() => showCancelConfirmModalDeleteClinicalTest = false)"
        CallbackConfirm="@deleteClinicalTest"
    />
} 

@code {
    private List<Experiment>? experiments;
    private List<ClinicalTest>? currentClinicalTests;
    private bool showExperimentModal = false;
    private bool showClinicalTestModal = false;
    private string EditorModalTitle = "";
    private Experiment? selectedExp;
    private ClinicalTest? selectedCT;
    private string experimentSearchValue { get; set; } = "";
    private bool showCancelConfirmModalDeleteExperiment = false;
    private bool showCancelConfirmModalDeleteClinicalTest = false;
    private string cancelConfirmModalTitle = "";
    private string cancelConfirmModalBody = "";
    private bool loadingExp = true;
    private bool loadingCt = true;

    private Experiment placeholderExp = new Experiment(
        id: "",
        experimentNumber: "",
        title: "",
        author: "",
        description: "",
        createdAt: DateTime.Now
    );

    private ClinicalTest placeholderCt = new ClinicalTest(
        id: "",
        title: "",
        nplicateSize: 3,
        description: "",
        createdAt: DateTime.Now
    );

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            loadingExp = true;
            experiments = await ExperimentManager.QueryExperiments("");
            loadingExp = false;
            StateHasChanged();
        }
    }

    private async void searchExperiments(ChangeEventArgs args)
    {
        experimentSearchValue = args.Value?.ToString();
        if (experimentSearchValue == null) return;
        experiments = await ExperimentManager.QueryExperiments(experimentSearchValue);
        StateHasChanged();
    }

    private async Task showClinicalTests(Experiment exp)
    {
        loadingCt = true;
        currentClinicalTests = await exp.QueryClinicalTests("");
        loadingCt = false;
        StateHasChanged();
    }

    private void openNewExperimentModal<T>(T obj)
    {
        selectedExp = new Experiment(Guid.NewGuid().ToString());
        showExperimentModal = true;
        EditorModalTitle = "Add experiment";
    }

    private void openNewClinicalTestModal<T>(T obj)
    {
        selectedCT = new ClinicalTest(Guid.NewGuid().ToString());
        selectedCT.ExperimentIds.Add(selectedExp.id);
        EditorModalTitle = "Add clinical test";
        showClinicalTestModal = true;
    }

    private async void closeEditorModal<T>(T? obj)
    {
        showExperimentModal = false;
        showClinicalTestModal = false;
        if (obj is Experiment)
        {
            selectedExp = null;
            Experiment exp = (Experiment)(object)obj;
            List<Experiment> expList = await ExperimentManager.QueryExperiments("");
            foreach (Experiment item in expList)
            {
                if (item.id == exp.id)
                {
                    selectedExp = exp;
                    break;
                }
            }
        }
        StateHasChanged();
    }

    public async void SaveExperimentCallback(Experiment e)
    {
        showExperimentModal = false;
        e.EditedAt = DateTime.Now;
        await e.SaveToDatabase();
        experiments = await ExperimentManager.QueryExperiments("");
        StateHasChanged();
        await showClinicalTests(e);
    }

   public async void SaveClinicalTestCallback(ClinicalTest SavedClinicalTest)
   {
        showClinicalTestModal = false;
        await ExperimentManager.SaveClinicalTestWithAssociate(SavedClinicalTest);
        experiments = await ExperimentManager.QueryExperiments(experimentSearchValue);
        StateHasChanged();
        await showClinicalTests(selectedExp);
   }

   private void setCurrentObject<T>(T obj) 
   {
      if (obj is Experiment)
      {
         selectedExp = ((Experiment)(object)obj);
         selectedCT = null;
      } else if (obj is ClinicalTest)
      {
         selectedCT = ((ClinicalTest)(object)obj);
      }
   }
   
   private async void deleteExperiment()
   {
      if (selectedExp == null) return;
      showCancelConfirmModalDeleteExperiment = false;
      await ExperimentManager.DeleteExperiment(selectedExp);
      experiments = await ExperimentManager.QueryExperiments("");
      currentClinicalTests = null;
      selectedExp = null;
      StateHasChanged();
    }

   private async void deleteClinicalTest()
   {
      if (selectedCT == null || selectedExp == null) return;
      showCancelConfirmModalDeleteClinicalTest = false;
      await ExperimentManager.DeleteClinicalTest(selectedCT);
      currentClinicalTests = await selectedExp.QueryClinicalTests("");
      StateHasChanged();
   }

   private async void MenuCardOnclickCallback<T>(T obj) 
   {
      setCurrentObject(obj);
      if (selectedExp == null) return;
      if (selectedCT == null) 
      {
         await showClinicalTests(selectedExp);
      } else
      {
         NavManager.NavigateTo($"/clinicaltest/{selectedExp.id}/{selectedCT.id}");
      }
   }

   private void MenuCardEditCallback<T>(T obj)
   {
      setCurrentObject(obj);
      if (selectedCT == null && selectedExp != null) {
         EditorModalTitle = "Edit: " + selectedExp.ExperimentNumber;
         showExperimentModal = true;
      } else if (selectedCT != null)
      {
         EditorModalTitle = "Edit: " + selectedCT.Title;
         showClinicalTestModal = true;
      }  
   }

   private async void MenuCardDeleteCallback<T>(T obj)
   {
      setCurrentObject(obj);
      if (selectedCT == null && selectedExp != null)
      {
         cancelConfirmModalTitle = "Delete: " + selectedExp.ExperimentNumber;
         cancelConfirmModalBody = "The experiment and clinical tests that only relate to this experiment will be deleted.";
         showCancelConfirmModalDeleteExperiment = true;
      } else if (selectedCT != null)
      {
         cancelConfirmModalTitle = "Delete: " + selectedCT.Title;
         cancelConfirmModalBody = "The clinical test will be deleted permanently from all associated experiments.";
         showCancelConfirmModalDeleteClinicalTest = true;
      }
      
   }
}
